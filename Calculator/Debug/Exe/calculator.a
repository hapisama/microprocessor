;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/12/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdlib.h>
;#include <stdio.h>
;
;
;char temp, ch_pre;
;int i=0,j;
;int counter = 0;
;int result = 0;
;char str[80];
;char ss[80];
;char op;
;int isFirst = 0;
;int firstNumber = 0;
;int secondNumber = 0;
;unsigned int x;
;int temperature;
;char* data = "                ";

	.DSEG
_0x3:
	.BYTE 0x11
;
;char read_key() {
; 0000 002D char read_key() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E     char keypad_in = 'Z';
; 0000 002F 
; 0000 0030     PORTB = 0b00001000;
;PCODE: $0000000F VOL: 0
;	keypad_in -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0031     if(PINB.4 == 1) { keypad_in = 'C'; };
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0032     if(PINB.5 == 1) { keypad_in = '0'; };
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0033     if(PINB.6 == 1) { keypad_in = 'E'; };
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0034     if(PINB.7 == 1) { keypad_in = '+'; };
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0035     PORTB = 0b00000100;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0036     if(PINB.4 == 1) { keypad_in = '1'; };
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0037     if(PINB.5 == 1) { keypad_in = '2'; };
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0038     if(PINB.6 == 1) { keypad_in = '3'; };
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0039     if(PINB.7 == 1) { keypad_in = '-'; };
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003A     PORTB = 0b00000010;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003B     if(PINB.4 == 1) { keypad_in = '4'; };
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003C     if(PINB.5 == 1) { keypad_in = '5'; };
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003D     if(PINB.6 == 1) { keypad_in = '6'; };
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 003E     if(PINB.7 == 1) { keypad_in = '*'; };
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003F     PORTB = 0b00000001;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0040     if(PINB.4 == 1) { keypad_in = '7'; };
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0041     if(PINB.5 == 1) { keypad_in = '8'; };
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0042     if(PINB.6 == 1) { keypad_in = '9'; };
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0043     if(PINB.7 == 1) { keypad_in = '/'; };
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0044 
; 0000 0045     delay_ms(150);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0046     return keypad_in;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0047 }
;PCODE: $00000080 VOL: 0
;
;void clear_array(char *arr, int size) {
; 0000 0049 void clear_array(char *arr, int size) {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004A     int j;
; 0000 004B     for(j=0; j<size; j++)
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;	*arr -> Y+4
;	size -> Y+2
;	j -> R16,R17
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 004C         arr[j] = ' ';
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 004D }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;
;// Voltage Reference: Int., cap. on AREF
;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0054 {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0055     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $000000A2 VOL: 0
;	adc_input -> Y+0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0056     // Delay needed for the stabilization of the ADC input voltage
; 0000 0057     delay_us(10);
;PCODE: $000000A6 VOL: 0
; 0000 0058     // Start the AD conversion
; 0000 0059     ADCSRA|=(1<<ADSC);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 005A     // Wait for the AD conversion to complete
; 0000 005B     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 005C     ADCSRA|=(1<<ADIF);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 005D     return ADCW;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 005E }
;PCODE: $000000B4 VOL: 0
;
;void main(void)
; 0000 0061 {
;PCODE: $000000B5 VOL: 0
; 0000 0062 
; 0000 0063 
; 0000 0064 
; 0000 0065     // Input/Output Ports initialization
; 0000 0066     // Port A initialization
; 0000 0067     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0068     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0069     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006A     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 006B 
; 0000 006C     // Port B initialization
; 0000 006D     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006E     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 006F     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0070     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0071 
; 0000 0072     // Port C initialization
; 0000 0073     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0074     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0075     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0076     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0077 
; 0000 0078     // Port D initialization
; 0000 0079     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007A     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 007B     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007C     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 007D 
; 0000 007E     // Timer/Counter 0 initialization
; 0000 007F     // Clock source: System Clock
; 0000 0080     // Clock value: Timer 0 Stopped
; 0000 0081     // Mode: Normal top=0xFF
; 0000 0082     // OC0 output: Disconnected
; 0000 0083     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0084     TCNT0=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0085     OCR0=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0086 
; 0000 0087     // Timer/Counter 1 initialization
; 0000 0088     // Clock source: System Clock
; 0000 0089     // Clock value: Timer1 Stopped
; 0000 008A     // Mode: Normal top=0xFFFF
; 0000 008B     // OC1A output: Disconnected
; 0000 008C     // OC1B output: Disconnected
; 0000 008D     // Noise Canceler: Off
; 0000 008E     // Input Capture on Falling Edge
; 0000 008F     // Timer1 Overflow Interrupt: Off
; 0000 0090     // Input Capture Interrupt: Off
; 0000 0091     // Compare A Match Interrupt: Off
; 0000 0092     // Compare B Match Interrupt: Off
; 0000 0093     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0094     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0095     TCNT1H=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0096     TCNT1L=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0097     ICR1H=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0098     ICR1L=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0099     OCR1AH=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 009A     OCR1AL=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 009B     OCR1BH=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 009C     OCR1BL=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 009D 
; 0000 009E     // Timer/Counter 2 initialization
; 0000 009F     // Clock source: System Clock
; 0000 00A0     // Clock value: Timer2 Stopped
; 0000 00A1     // Mode: Normal top=0xFF
; 0000 00A2     // OC2 output: Disconnected
; 0000 00A3     ASSR=0<<AS2;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00A4     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00A5     TCNT2=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00A6     OCR2=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00A7 
; 0000 00A8     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A9     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00AA 
; 0000 00AB     // External Interrupt(s) initialization
; 0000 00AC     // INT0: Off
; 0000 00AD     // INT1: Off
; 0000 00AE     // INT2: Off
; 0000 00AF     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00B0     MCUCSR=(0<<ISC2);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00B1 
; 0000 00B2     // USART initialization
; 0000 00B3     // USART disabled
; 0000 00B4     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00B5 
; 0000 00B6     // Analog Comparator initialization
; 0000 00B7     // Analog Comparator: Off
; 0000 00B8     // The Analog Comparator's positive input is
; 0000 00B9     // connected to the AIN0 pin
; 0000 00BA     // The Analog Comparator's negative input is
; 0000 00BB     // connected to the AIN1 pin
; 0000 00BC     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00BD 
; 0000 00BE     // ADC initialization
; 0000 00BF     // ADC Clock frequency: 7.813 kHz
; 0000 00C0     // ADC Voltage Reference: Int., cap. on AREF
; 0000 00C1     // ADC Auto Trigger Source: Free Running
; 0000 00C2     ADMUX=ADC_VREF_TYPE;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00C3     ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00C4     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00C5 
; 0000 00C6     // SPI initialization
; 0000 00C7     // SPI disabled
; 0000 00C8     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00C9 
; 0000 00CA     // TWI initialization
; 0000 00CB     // TWI disabled
; 0000 00CC     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00CD 
; 0000 00CE     // Alphanumeric LCD initialization
; 0000 00CF     // Connections are specified in the
; 0000 00D0     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D1     // RS - PORTC Bit 0
; 0000 00D2     // RD - PORTC Bit 1
; 0000 00D3     // EN - PORTC Bit 2
; 0000 00D4     // D4 - PORTC Bit 4
; 0000 00D5     // D5 - PORTC Bit 5
; 0000 00D6     // D6 - PORTC Bit 6
; 0000 00D7     // D7 - PORTC Bit 7
; 0000 00D8     // Characters/line: 16
; 0000 00D9     lcd_init(16);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00DA 
; 0000 00DB     while (1) {
;PCODE: $000000FE VOL: 0
; 0000 00DC         // LM35 temperature
; 0000 00DD         lcd_gotoxy(0, 0);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00DE         x = read_adc(0);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00DF         temperature = x/4;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00E0         itoa(temperature, data);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00E1         lcd_puts(data);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00E2         lcd_puts(" C  ");
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00E3         delay_ms(25);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00E4 
; 0000 00E5         //CALCULATOR
; 0000 00E6         lcd_gotoxy(i,1);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00E7         temp = 'Z';
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00E8         temp = read_key();
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00E9 
; 0000 00EA         if(temp == 'E'){
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00EB             if(op == '+')
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00EC                 result = firstNumber + secondNumber;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00ED             if(op == '-')
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00EE                 result = firstNumber - secondNumber;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00EF             if(op == '*')
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00F0                 result = firstNumber * secondNumber;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00F1             if(op == '/')
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00F2                 result = firstNumber / secondNumber;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00F3             itoa(result, data);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00F4             lcd_puts("=");
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00F5             i++;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00F6             lcd_puts(data);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00F7             i++;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00F8             delay_ms(25);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00F9             continue;
;PCODE: $00000150 VOL: 0
; 0000 00FA         }
; 0000 00FB 
; 0000 00FC         if(temp == 'C'){
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00FD             lcd_clear();
;PCODE: $00000155 VOL: 0
; 0000 00FE             isFirst = 0;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00FF             firstNumber = 0;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0100             for(j=0; j<10; j++)
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0101                 str[j] = ' ';
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0102 for(j=0; j<10; j++)
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0103                 ss[j] = ' ';
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0106 secondNumber = 0;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0107             counter = 0;
;PCODE: $00000182 VOL: 0
; 0000 0108             result = 0;
;PCODE: $00000183 VOL: 0
; 0000 0109             i = 0;
;PCODE: $00000184 VOL: 0
; 0000 010A             delay_ms(25);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 010B             continue;
;PCODE: $00000188 VOL: 0
; 0000 010C         }
; 0000 010D 
; 0000 010E 
; 0000 010F         if ( temp != 'Z' && isFirst == 0) {
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0110             if(temp == '+' || temp == '-' || temp == '*' || temp == '/') {
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 0111                 op = temp;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0112                 isFirst = 1;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0113                 lcd_putchar(temp);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0114                 i++;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0115                 delay_ms(25);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0116                 if(i%16 == 0 )
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0117                     i = 0;
;PCODE: $000001B3 VOL: 0
; 0000 0118                 counter = 0;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0119                 continue;
;PCODE: $000001B6 VOL: 0
; 0000 011A             }
; 0000 011B             else{
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 011C                 str[counter] = temp;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 011D                 firstNumber = (firstNumber * 10) + ((int)temp - 48);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 011E                 counter++;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 011F                 lcd_clear();
;PCODE: $000001C8 VOL: 0
; 0000 0120                 lcd_gotoxy(0, 1);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0121                 lcd_puts(str);
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0122                 i++;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0123                 delay_ms(25);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0124                 if(i % 16 == 0 )
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0125                     i = 0;
;PCODE: $000001DA VOL: 0
; 0000 0126                 continue;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0127             }
;PCODE: $000001DD VOL: 0
; 0000 0128         }
; 0000 0129 
; 0000 012A         if ( temp != 'Z' && isFirst == 1) {
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 012B             if(temp == '+' || temp == '-' || temp == '*' || temp == '/')
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 012C                 continue;
;PCODE: $000001F7 VOL: 0
; 0000 012D             ss[counter] = temp;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 012E             secondNumber = (secondNumber * 10) + ((int)temp - 48);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 012F             counter++;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0130             lcd_putchar(temp);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0131             i++;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0132             if(i % 16 == 0 )
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0133                 i = 0;
;PCODE: $00000212 VOL: 0
; 0000 0134 
; 0000 0135         }
;PCODE: $00000213 VOL: 0
; 0000 0136 
; 0000 0137         delay_ms(10);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0138         ch_pre = temp;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0139     }
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 013A }
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0

	.DSEG
_0x1E:
	.BYTE 0x7
;
;
;
